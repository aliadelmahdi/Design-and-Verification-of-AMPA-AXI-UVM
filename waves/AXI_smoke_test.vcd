$date
	Tue Aug 12 21:31:15 2025
$end
$version
	QuestaSim Version 2021.1
$end
$timescale
	1ps
$end

$scope module tb_top $end
$var reg 1 ! aclk $end

$scope module axi_if $end
$var reg 1 " aclk $end
$var reg 1 # areset_n $end
$var reg 1 $ start_read $end
$var reg 1 % start_write $end
$var reg 32 & araddr [31:0] $end
$var reg 1 ' arvalid $end
$var reg 1 ( arready $end
$var reg 8 ) arlen [7:0] $end
$var reg 3 * arsize [2:0] $end
$var reg 2 + arburst [1:0] $end
$var reg 32 , rdata [31:0] $end
$var reg 2 - rresp [1:0] $end
$var reg 1 . rvalid $end
$var reg 1 / rready $end
$var reg 1 0 rlast $end
$var reg 32 1 awaddr [31:0] $end
$var reg 1 2 awvalid $end
$var reg 1 3 awready $end
$var reg 8 4 awlen [7:0] $end
$var reg 3 5 awsize [2:0] $end
$var reg 2 6 awburst [1:0] $end
$var reg 32 7 wdata [31:0] $end
$var reg 4 8 wstrb [3:0] $end
$var reg 1 9 wvalid $end
$var reg 1 : wready $end
$var reg 1 ; wlast $end
$var reg 2 < bresp [1:0] $end
$var reg 1 = bvalid $end
$var reg 1 > bready $end
$upscope $end

$scope module master_gld $end
$var parameter 32 ? LEN $end
$var reg 3 @ state [2:0] $end
$var reg 3 A next_state [2:0] $end
$var reg 32 B addr [31:0] $end
$var reg 32 C data [31:0] $end
$var reg 8 D len_cnt [7:0] $end
$var reg 3 E rdata_cnt [2:0] $end
$var reg 1 F start_read_delay $end
$var reg 1 G start_write_delay $end
$upscope $end

$scope module slave_gld $end
$var reg 3 H state [2:0] $end
$var reg 3 I next_state [2:0] $end
$var reg 32 J addr [31:0] $end
$var reg 8 K len [7:0] $end
$var reg 3 L size [2:0] $end
$var reg 2 M burst [1:0] $end
$var reg 32 N data [31:0] $end
$var reg 3 O len_cnt [2:0] $end
$upscope $end

$scope module master $end
$var integer 32 P i $end
$upscope $end
$upscope $end

$scope begin shared_pkg $end
$var parameter 32 Q ADDR_WIDTH $end
$var parameter 32 R DATA_WIDTH $end
$var parameter 32 S STRB_WIDTH $end
$var parameter 3 T SIZE_1_BYTE $end
$var parameter 3 U SIZE_2_BYTE $end
$var parameter 3 V SIZE_4_BYTE $end
$var parameter 3 W SIZE_8_BYTE $end
$var parameter 3 X SIZE_16_BYTE $end
$var parameter 3 Y SIZE_32_BYTE $end
$var parameter 3 Z SIZE_64_BYTE $end
$var parameter 3 [ SIZE_128_BYTE $end
$var parameter 2 \ BURST_FIXED $end
$var parameter 2 ] BURST_INCR $end
$var parameter 2 ^ BURST_WRAP $end
$var parameter 2 _ RESP_OKAY $end
$var parameter 2 ` RESP_EXOKAY $end
$var parameter 2 a RESP_SLVERR $end
$var parameter 2 b RESP_DECERR $end
$upscope $end

$scope begin uvm_pkg $end
$var parameter 32 c UVM_HDL_MAX_WIDTH $end
$var parameter 32 d UVM_STREAMBITS $end
$var parameter 32 e UVM_RADIX $end
$var parameter 32 f UVM_MACRO_NUMFLAGS $end
$var parameter 32 g UVM_DEFAULT $end
$var parameter 32 h UVM_ALL_ON $end
$var parameter 32 i UVM_FLAGS_ON $end
$var parameter 32 j UVM_FLAGS_OFF $end
$var parameter 32 k UVM_COPY $end
$var parameter 32 l UVM_NOCOPY $end
$var parameter 32 m UVM_COMPARE $end
$var parameter 32 n UVM_NOCOMPARE $end
$var parameter 32 o UVM_PRINT $end
$var parameter 32 p UVM_NOPRINT $end
$var parameter 32 q UVM_RECORD $end
$var parameter 32 r UVM_NORECORD $end
$var parameter 32 s UVM_PACK $end
$var parameter 32 t UVM_NOPACK $end
$var parameter 32 u UVM_PHYSICAL $end
$var parameter 32 v UVM_ABSTRACT $end
$var parameter 32 w UVM_READONLY $end
$var parameter 32 x UVM_NODEFPRINT $end
$var parameter 32 y UVM_MACRO_EXTRAS $end
$var parameter 32 z UVM_FLAGS $end
$var parameter 32 { UVM_UNPACK $end
$var parameter 32 | UVM_CHECK_FIELDS $end
$var parameter 32 } UVM_END_DATA_EXTRA $end
$var parameter 32 ~ UVM_START_FUNCS $end
$var parameter 32 !! UVM_SET $end
$var parameter 32 "! UVM_SETINT $end
$var parameter 32 #! UVM_SETOBJ $end
$var parameter 32 $! UVM_SETSTR $end
$var parameter 32 %! UVM_END_FUNCS $end
$var parameter 32 &! UVM_STR_CRC_POLYNOMIAL $end
$var parameter 32 '! UVM_STDOUT $end
$var parameter 32 (! UVM_LINE_WIDTH $end
$var parameter 32 )! UVM_NUM_LINES $end
$var parameter 32 *! UVM_SMALL_STRING $end
$var parameter 32 +! UVM_LARGE_STRING $end
$var reg 1 ,! uvm_start_uvm_declarations $end
$var integer 32 -! uvm_global_random_seed $end
$var integer 32 .! UVM_UNBOUNDED_CONNECTIONS $end

$scope function uvm_hdl_check_path $end
$var integer 32 /! uvm_hdl_check_path $end
$upscope $end

$scope function uvm_hdl_deposit $end
$var integer 32 0! uvm_hdl_deposit $end
$var reg 1024 1! value [1023:0] $end
$upscope $end

$scope function uvm_hdl_force $end
$var integer 32 2! uvm_hdl_force $end
$var reg 1024 3! value [1023:0] $end
$upscope $end

$scope task uvm_hdl_force_time $end
$var reg 1024 4! value [1023:0] $end
$var time 64 5! force_time $end
$upscope $end

$scope function uvm_hdl_release_and_read $end
$var integer 32 6! uvm_hdl_release_and_read $end
$var reg 1024 7! value [1023:0] $end
$upscope $end

$scope function uvm_hdl_release $end
$var integer 32 8! uvm_hdl_release $end
$upscope $end

$scope function uvm_hdl_read $end
$var integer 32 9! uvm_hdl_read $end
$var reg 1024 :! value [1023:0] $end
$upscope $end

$scope function uvm_dpi_regexec $end
$var integer 32 ;! uvm_dpi_regexec $end
$upscope $end

$scope function uvm_re_match $end
$var integer 32 <! uvm_re_match $end
$upscope $end

$scope function uvm_radix_to_string $end
$var integer 32 =! radix $end
$upscope $end

$scope function uvm_instance_scope $end
$var reg 8 >! c [7:0] $end
$var integer 32 ?! pos $end
$upscope $end

$scope function uvm_oneway_hash $end
$var integer 32 @! uvm_oneway_hash $end
$var integer 32 A! seed $end
$var reg 1 B! msb $end
$var reg 8 C! current_byte [7:0] $end
$var reg 32 D! crc1 [31:0] $end
$upscope $end

$scope function uvm_create_random_seed $end
$var integer 32 E! uvm_create_random_seed $end
$upscope $end

$scope function uvm_leaf_scope $end
$var reg 8 F! scope_separator [7:0] $end
$var reg 8 G! bracket_match [7:0] $end
$var integer 32 H! pos $end
$var integer 32 I! bmatches $end
$upscope $end

$scope function uvm_vector_to_string $end
$var reg 4096 J! value [4095:0] $end
$var integer 32 K! size $end
$var integer 32 L! radix $end
$upscope $end

$scope function uvm_get_array_index_int $end
$var integer 32 M! uvm_get_array_index_int $end
$var reg 1 N! is_wildcard $end
$var integer 32 O! i $end
$upscope $end

$scope function uvm_get_array_index_string $end
$var reg 1 P! is_wildcard $end
$var integer 32 Q! i $end
$upscope $end

$scope function uvm_is_array $end
$var reg 1 R! uvm_is_array $end
$upscope $end

$scope function set_global_timeout $end
$var time 64 S! timeout $end
$var reg 1 T! overridable $end
$upscope $end

$scope function set_global_stop_timeout $end
$var time 64 U! timeout $end
$upscope $end

$scope function uvm_report_enabled $end
$var reg 1 V! uvm_report_enabled $end
$var integer 32 W! verbosity $end
$var reg 2 X! severity [1:0] $end
$upscope $end

$scope function uvm_report $end
$var reg 2 Y! severity [1:0] $end
$var integer 32 Z! verbosity $end
$var integer 32 [! line $end
$upscope $end

$scope function uvm_report_info $end
$var integer 32 \! verbosity $end
$var integer 32 ]! line $end
$upscope $end

$scope function uvm_report_warning $end
$var integer 32 ^! verbosity $end
$var integer 32 _! line $end
$upscope $end

$scope function uvm_report_error $end
$var integer 32 `! verbosity $end
$var integer 32 a! line $end
$upscope $end

$scope function uvm_report_fatal $end
$var integer 32 b! verbosity $end
$var integer 32 c! line $end
$upscope $end

$scope function uvm_string_to_severity $end
$var reg 1 d! uvm_string_to_severity $end
$var reg 2 e! sev [1:0] $end
$upscope $end

$scope function set_config_int $end
$var reg 4096 f! value [4095:0] $end
$upscope $end

$scope function set_config_object $end
$var reg 1 g! clone $end
$upscope $end

$scope function uvm_is_match $end
$var reg 1 h! uvm_is_match $end
$upscope $end

$scope function uvm_string_to_bits $end
$var reg 115200 i! uvm_string_to_bits [115199:0] $end
$upscope $end

$scope function uvm_bits_to_string $end
$var reg 115200 j! str [115199:0] $end
$upscope $end

$scope task uvm_wait_for_nba_region $end
$var integer 32 k! nba $end
$var integer 32 l! next_nba $end
